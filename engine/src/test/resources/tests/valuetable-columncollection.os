///////////////////////////////////////////////////////////////////////
//
// Тест проверки работы таблицы значений
//
//
///////////////////////////////////////////////////////////////////////

Перем юТест;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция Версия() Экспорт
	Возврат "0.2";
КонецФункции

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_СоздатьКолонкуТаблицыЗначений");
	ВсеТесты.Добавить("ТестДолжен_СдвинутьКолонкуТаблицыЗначений");

	Возврат ВсеТесты;

КонецФункции

Процедура ТестДолжен_СоздатьКолонкуТаблицыЗначений() Экспорт

	Т = Новый ТаблицаЗначений;

	ОписаниеТипаКолонки = Новый ОписаниеТипов("Число");
	К1 = Т.Колонки.Добавить("Колонка1", ОписаниеТипаКолонки, "Колонка 1", 4);
	юТест.ПроверитьРавенство(К1.Имя, "Колонка1");
	юТест.ПроверитьРавенство(К1.Заголовок, "Колонка 1");
	юТест.ПроверитьРавенство(ТипЗнч(К1.ТипЗначения), Тип("ОписаниеТипов"));
	юТест.ПроверитьРавенство(К1.Ширина, 4);

	К0 = Т.Колонки.Вставить(0, "Колонка0", ОписаниеТипаКолонки, "Колонка 0", 4);
	юТест.ПроверитьРавенство(К0.Имя, "Колонка0");
	юТест.ПроверитьРавенство(К0.Заголовок, "Колонка 0");
	юТест.ПроверитьРавенство(ТипЗнч(К0.ТипЗначения), Тип("ОписаниеТипов"));
	юТест.ПроверитьРавенство(К0.Ширина, 4);

	юТест.ПроверитьРавенство(Т.Колонки.Получить(0), К0);
	юТест.ПроверитьРавенство(Т.Колонки.Получить(1), К1);

	юТест.ПроверитьРавенство(Т.Колонки.Индекс(К0), 0);
	юТест.ПроверитьРавенство(Т.Колонки.Индекс(К1), 1);

	юТест.ПроверитьРавенство(Т.Колонки.Количество(), 2);

	Т.Колонки.Очистить();
	юТест.ПроверитьРавенство(Т.Колонки.Количество(), 0);

КонецПроцедуры

Процедура ТестДолжен_СдвинутьКолонкуТаблицыЗначений() Экспорт

	Т = Новый ТаблицаЗначений;

	ОписаниеТипаКолонки = Новый ОписаниеТипов("Число");
	К0 = Т.Колонки.Добавить("Колонка0");
	К1 = Т.Колонки.Добавить("Колонка1");
	К2 = Т.Колонки.Добавить("Колонка2");
	К3 = Т.Колонки.Добавить("Колонка3");
	К4 = Т.Колонки.Добавить("Колонка4");

	юТест.ПроверитьРавенство(Т.Колонки.Количество(), 5);

	Т.Колонки.Сдвинуть(4, -1);
	юТест.ПроверитьРавенство(Т.Колонки.Индекс(К4), 3);

	Т.Колонки.Сдвинуть(К4, 1);
	юТест.ПроверитьРавенство(Т.Колонки.Индекс(К4), 4);

	БылоИсключение = Ложь;
	Попытка
		Т.Колонки.Сдвинуть(К0, -1);
	Исключение
		БылоИсключение = Истина;
	КонецПопытки;
	юТест.ПроверитьИстину(БылоИсключение, "Сдвиг за пределы");

	БылоИсключение = Ложь;
	Попытка
		Т.Колонки.Сдвинуть(К4, 1);
	Исключение
		БылоИсключение = Истина;
	КонецПопытки;
	юТест.ПроверитьИстину(БылоИсключение, "Сдвиг за пределы");

КонецПроцедуры
